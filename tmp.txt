import "./styles/main.scss";
import { IPost } from "../interfaces/posts";
import { dbConnection, objectStores, errors } from "../constants";
import Database from "../db/index";

const db = new Database(
  dbConnection.DB_NAME,
  dbConnection.DB_VERSION,
  dbConnection.DB_KEY
)
  .connect([objectStores.POSTS])
  .then((res: IDBDatabase) => {
    console.log("init");
    console.log(res.objectStoreNames);
  });

let openRequest = indexedDB.open(dbConnection.DB_NAME, dbConnection.DB_VERSION);

openRequest.onupgradeneeded = () => {
  let db = openRequest.result;
  if (!db.objectStoreNames.contains(objectStores.POSTS)) {
    db.createObjectStore(objectStores.POSTS, {
      keyPath: "id",
      autoIncrement: true
    });
  }
};
openRequest.onerror = () => {
  console.error("Error", openRequest.error);
};
openRequest.onsuccess = () => {
  let db = openRequest.result;

  db.onversionchange = () => {
    db.close();
    alert(errors.OLD_DB_PAGE_REFRESH);
  };

  const authorInput = document.querySelector(
    "#newPostForm input[name='author']"
  ) as HTMLInputElement;
  const linkInput = document.querySelector(
    "#newPostForm input[name='imageLink']"
  ) as HTMLInputElement;
  const descriptionInput = document.querySelector(
    "#newPostForm input[name='description']"
  ) as HTMLInputElement;
  const loadPreviewButton = document.querySelector(
    "#newPostForm button[name='loadPreview']"
  ) as HTMLElement;
  const imgPreview = document.querySelector(
    "#newPostForm img[name='imgPreview'"
  ) as HTMLImageElement;

  loadPreviewButton.addEventListener("click", event => {
    event.preventDefault();
    if (linkInput && linkInput.value !== "") {
      imgPreview.style.display = "inline-block";
      imgPreview.src = linkInput.value;
    }
  });

  const newPostForm: HTMLElement | null = document.getElementById(
    "newPostForm"
  );
  newPostForm.addEventListener("submit", event => {
    event.preventDefault();

    if (authorInput && linkInput && descriptionInput) {
      addPost(db, {
        author: authorInput.value,
        link: linkInput.value,
        description: descriptionInput.value
      });
      authorInput.value = "";
      linkInput.value = "";
      descriptionInput.value = "";
    }
  });

  const trans = db.transaction(objectStores.POSTS, "readonly");
  const store = trans.objectStore(objectStores.POSTS);
  const data = store.getAll();

  data.onsuccess = () => {
    const galleryList = document.getElementById("gallery") as HTMLElement;

    for (let el of data.result) {
      const post = document.createElement("div");
      const postAuthor = document.createElement("p");
      const postImage = document.createElement("img");
      const postDescription = document.createElement("p");

      post.classList.add("post");
      postAuthor.classList.add("post__author");
      postAuthor.innerText = el.author;
      postImage.classList.add("post__img");
      postImage.src = el.link;
      postDescription.classList.add("post__description");
      postDescription.innerText = el.description;

      post.appendChild(postAuthor);
      post.appendChild(postImage);
      post.appendChild(postDescription);

      galleryList.appendChild(post);
    }
  };
};

export const addPost = (db: IDBDatabase, values: IPost) => {
  let transaction = db.transaction(objectStores.POSTS, "readwrite");

  const request = transaction.objectStore(objectStores.POSTS).add(values);

  request.onerror = () => {
    console.log("Error", request.error);
  };
};